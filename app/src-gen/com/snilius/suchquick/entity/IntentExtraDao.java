package com.snilius.suchquick.entity;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.snilius.suchquick.entity.IntentExtra;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INTENT_EXTRA".
*/
public class IntentExtraDao extends AbstractDao<IntentExtra, Long> {

    public static final String TABLENAME = "INTENT_EXTRA";

    /**
     * Properties of entity IntentExtra.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KeyName = new Property(1, String.class, "KeyName", false, "KEY_NAME");
        public final static Property StringProp = new Property(2, String.class, "StringProp", false, "STRING_PROP");
        public final static Property IntProp = new Property(3, Integer.class, "IntProp", false, "INT_PROP");
        public final static Property ShortcutId = new Property(4, long.class, "shortcutId", false, "SHORTCUT_ID");
    };

    private Query<IntentExtra> shortcut_IntentExtraListQuery;

    public IntentExtraDao(DaoConfig config) {
        super(config);
    }
    
    public IntentExtraDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INTENT_EXTRA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"KEY_NAME\" TEXT," + // 1: KeyName
                "\"STRING_PROP\" TEXT," + // 2: StringProp
                "\"INT_PROP\" INTEGER," + // 3: IntProp
                "\"SHORTCUT_ID\" INTEGER NOT NULL );"); // 4: shortcutId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INTENT_EXTRA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IntentExtra entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String KeyName = entity.getKeyName();
        if (KeyName != null) {
            stmt.bindString(2, KeyName);
        }
 
        String StringProp = entity.getStringProp();
        if (StringProp != null) {
            stmt.bindString(3, StringProp);
        }
 
        Integer IntProp = entity.getIntProp();
        if (IntProp != null) {
            stmt.bindLong(4, IntProp);
        }
        stmt.bindLong(5, entity.getShortcutId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IntentExtra readEntity(Cursor cursor, int offset) {
        IntentExtra entity = new IntentExtra( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // KeyName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StringProp
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // IntProp
            cursor.getLong(offset + 4) // shortcutId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IntentExtra entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKeyName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStringProp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIntProp(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setShortcutId(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IntentExtra entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IntentExtra entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "intentExtraList" to-many relationship of Shortcut. */
    public List<IntentExtra> _queryShortcut_IntentExtraList(long shortcutId) {
        synchronized (this) {
            if (shortcut_IntentExtraListQuery == null) {
                QueryBuilder<IntentExtra> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ShortcutId.eq(null));
                shortcut_IntentExtraListQuery = queryBuilder.build();
            }
        }
        Query<IntentExtra> query = shortcut_IntentExtraListQuery.forCurrentThread();
        query.setParameter(0, shortcutId);
        return query.list();
    }

}
