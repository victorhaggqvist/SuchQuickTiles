package com.snilius.suchquick.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snilius.suchquick.entity.Tile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TILE".
*/
public class TileDao extends AbstractDao<Tile, Long> {

    public static final String TABLENAME = "TILE";

    /**
     * Properties of entity Tile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Label = new Property(1, String.class, "Label", false, "LABEL");
        public final static Property ClickType = new Property(2, String.class, "ClickType", false, "CLICK_TYPE");
        public final static Property LongClickType = new Property(3, String.class, "LongClickType", false, "LONG_CLICK_TYPE");
        public final static Property ClickActionId = new Property(4, Long.class, "ClickActionId", false, "CLICK_ACTION_ID");
        public final static Property LongClickActionId = new Property(5, Long.class, "LongClickActionId", false, "LONG_CLICK_ACTION_ID");
        public final static Property IconResource = new Property(6, Integer.class, "IconResource", false, "ICON_RESOURCE");
        public final static Property IconPath = new Property(7, String.class, "IconPath", false, "ICON_PATH");
        public final static Property IconIsPackageDrawable = new Property(8, Boolean.class, "IconIsPackageDrawable", false, "ICON_IS_PACKAGE_DRAWABLE");
        public final static Property SystemTileName = new Property(9, String.class, "SystemTileName", false, "SYSTEM_TILE_NAME");
        public final static Property Enabled = new Property(10, Boolean.class, "Enabled", false, "ENABLED");
    };


    public TileDao(DaoConfig config) {
        super(config);
    }
    
    public TileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LABEL\" TEXT," + // 1: Label
                "\"CLICK_TYPE\" TEXT," + // 2: ClickType
                "\"LONG_CLICK_TYPE\" TEXT," + // 3: LongClickType
                "\"CLICK_ACTION_ID\" INTEGER," + // 4: ClickActionId
                "\"LONG_CLICK_ACTION_ID\" INTEGER," + // 5: LongClickActionId
                "\"ICON_RESOURCE\" INTEGER," + // 6: IconResource
                "\"ICON_PATH\" TEXT," + // 7: IconPath
                "\"ICON_IS_PACKAGE_DRAWABLE\" INTEGER," + // 8: IconIsPackageDrawable
                "\"SYSTEM_TILE_NAME\" TEXT," + // 9: SystemTileName
                "\"ENABLED\" INTEGER);"); // 10: Enabled
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Label = entity.getLabel();
        if (Label != null) {
            stmt.bindString(2, Label);
        }
 
        String ClickType = entity.getClickType();
        if (ClickType != null) {
            stmt.bindString(3, ClickType);
        }
 
        String LongClickType = entity.getLongClickType();
        if (LongClickType != null) {
            stmt.bindString(4, LongClickType);
        }
 
        Long ClickActionId = entity.getClickActionId();
        if (ClickActionId != null) {
            stmt.bindLong(5, ClickActionId);
        }
 
        Long LongClickActionId = entity.getLongClickActionId();
        if (LongClickActionId != null) {
            stmt.bindLong(6, LongClickActionId);
        }
 
        Integer IconResource = entity.getIconResource();
        if (IconResource != null) {
            stmt.bindLong(7, IconResource);
        }
 
        String IconPath = entity.getIconPath();
        if (IconPath != null) {
            stmt.bindString(8, IconPath);
        }
 
        Boolean IconIsPackageDrawable = entity.getIconIsPackageDrawable();
        if (IconIsPackageDrawable != null) {
            stmt.bindLong(9, IconIsPackageDrawable ? 1L: 0L);
        }
 
        String SystemTileName = entity.getSystemTileName();
        if (SystemTileName != null) {
            stmt.bindString(10, SystemTileName);
        }
 
        Boolean Enabled = entity.getEnabled();
        if (Enabled != null) {
            stmt.bindLong(11, Enabled ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Tile readEntity(Cursor cursor, int offset) {
        Tile entity = new Tile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Label
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ClickType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // LongClickType
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // ClickActionId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // LongClickActionId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // IconResource
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // IconPath
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // IconIsPackageDrawable
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // SystemTileName
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // Enabled
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLabel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClickType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongClickType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClickActionId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLongClickActionId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIconResource(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIconPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIconIsPackageDrawable(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setSystemTileName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEnabled(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Tile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Tile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
